#!/usr/bin/env python3

from typing import List, Protocol, Union

from torch import Tensor


class DistributionProtocol(Protocol):
    """
    The `DistributionProtocol` class defines a protocol for probability distributions, with methods for
    calculating the log probability and sampling from the distribution.
    """

    def log_prob(self, x: Tensor, **kwargs) -> Tensor:
        """
        The function `log_prob` calculates the logarithm of the density of a given input `x`.

        :param x: The parameter `x` is a tensor, which is a multi-dimensional array. It represents the input
        data for which you want to calculate the log density
        :type x: Tensor
        """
        ...

    def sample(
        self, n_samples: int, seed: Union[int, None] = None, **kwargs
    ) -> Union[List[Tensor], Tensor]:
        """
        The `sample` function generates a specified number of samples using a given seed and returns them as
        a list or a tensor.

        :param n_samples: The `n_samples` parameter specifies the number of samples to generate. It is an
        integer value that determines how many samples will be generated by the function
        :type n_samples: int
        :param seed: The `seed` parameter is an optional parameter that specifies the seed value for random
        number generation. If a seed value is provided, it ensures that the random numbers generated are
        reproducible. If no seed value is provided, the random numbers generated will be different each time
        the function is called
        :type seed: Union[int, None]
        """
        ...
